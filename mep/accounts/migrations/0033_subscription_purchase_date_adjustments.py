# Generated by Django 2.2.11 on 2020-04-28 14:13
import datetime

from django.db import migrations


def calculate_purchase_date(apps, schema_editor):
    '''populate purchase dates for subscription events'''
    Subscription = apps.get_model('accounts', 'Subscription')

    for sub in Subscription.objects.all():
        # in all cases, set purchase date from start date
        sub.purchase_date = sub.start_date
        # set precision to match also
        sub.purchase_date_precision = sub.start_date_precision

        # if this is a renewal with a start date, check if there is a
        # preceding subscription and recalculate subscription dates
        if sub.subtype == 'ren' and sub.start_date:
            # find closest preceding subscription for the same account
            preceding_sub = Subscription.objects \
                .filter(account=sub.account,
                        start_date__lt=sub.start_date) \
                .exclude(pk=sub.pk) \
                .last()

            # if there is a preceding subscription with an end date
            if preceding_sub and preceding_sub.end_date:
                # next subscription should start the day after this one ends
                next_start = preceding_sub.end_date + datetime.timedelta(days=1)
                # if current start is before expected next start, adjust
                if sub.start_date < next_start:
                    # if there is an end date, calculate duration and adjust
                    # before changing start date
                    if sub.end_date:
                        duration = sub.end_date - sub.start_date
                        sub.end_date = next_start + duration

                    sub.start_date = next_start
        sub.save()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0032_subscription_add_purchase_date'),
    ]

    operations = [
        migrations.RunPython(
            code=calculate_purchase_date,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
