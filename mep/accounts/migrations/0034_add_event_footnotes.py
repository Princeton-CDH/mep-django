# Generated by Django 2.2.11 on 2020-12-08 14:53

from django.db import migrations


def add_missing_footnotes(apps, schema_editor):
    '''
    '''
    Bibliography = apps.get_model('footnotes', 'Bibliography')
    Footnote = apps.get_model('footnotes', 'Footnote')
    Event = apps.get_model('accounts', 'Event')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    event_content_type = ContentType.objects \
        .get(model='event', app_label='accounts')

    # get bibliographic entries to be used as sources for footnotes
    addressbook_pre1936 = Bibliography.objects \
        .get(bibliographic_note__contains="Address Book 1919–1935",
             source_type__name='Address Book')
    addressbook_1936 = Bibliography.objects \
        .get(bibliographic_note__contains="Address Book 1935–1937",
             source_type__name='Address Book')
    logbooks = Bibliography.objects \
        .get(bibliographic_note__contains="Logbooks 1919–1941",
             source_type__name='Logbook')

    # because footnote is a generic relation, it can't be used in a
    # queryset filter in a migration; instead, get a list event ids
    # with footnotes, so we can exclude them
    event_footnotes = Footnote.objects \
        .filter(content_type=event_content_type) \
        .values_list('object_id', flat=True)

    for event in Event.objects.exclude(notes__contains='P36ADD',
                                       pk__in=event_footnotes) \
                              .filter(notes__contains='36ADD'):
        # create a footnote associating each event with 1936 address book
        # NOTE: use bulk create?
        Footnote.objects.create(
            bibliography=addressbook_1936,
            content_type=event_content_type,
            object_id=event.pk
        )

    # find all events with tag P36ADD and no footnote
    for event in Event.objects.filter(notes__contains='P36ADD') \
                              .exclude(pk__in=event_footnotes):
        # create a footnote associating each event with pre-1936 address book
        # NOTE: use bulk create?
        Footnote.objects.create(
            bibliography=addressbook_pre1936,
            content_type=event_content_type,
            object_id=event.pk
        )

    # find all remaining events without footnotes and associate with logbooks
    for event in Event.objects.exclude(pk__in=event_footnotes):
        # create a footnote associating each event with logbooks
        # NOTE: use bulk create?
        Footnote.objects.create(
            bibliography=logbooks,
            content_type=event_content_type,
            object_id=event.pk
        )


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0033_subscription_purchase_date_adjustments'),
        ('footnotes', '0005_consolidate_event_footnotes'),
    ]

    operations = [
        migrations.RunPython(add_missing_footnotes,
                             migrations.RunPython.noop)
    ]
