# Generated by Django 2.2.11 on 2020-03-31 19:24

import re
from collections import defaultdict

from django.db import migrations, models
from django.utils.text import slugify
import stop_words
from unidecode import unidecode


STOP_WORDS = stop_words.get_stop_words('en') + \
    stop_words.get_stop_words('fr')

# fixme: regex is separating contractions like can't and youth's
# would be better to keep those if possible
# - remove the -s- but keep can't as cant if possible
# and/or remove single letter words too
# - should "ah" be a stopword?  auld?


def remove_stopwords(text):
    return ' '.join(word for word in re.split(r'[\s\W]+', text)
                    if slugify(word) not in STOP_WORDS)


def creator_lastname(work):
    creators = work.creator_set.all()
    lastname = ''
    if creators.exists():
        creator = creators.filter(creator_type__name='Author').first()
        # if no author, use first editor
        if not creator:
            creator = creators.filter(creator_type__name='Editor').first()

        if creator:
            # based on logic from person short name property
            lastname = creator.person.sort_name.split(',')[0] \
                                               .split('(')[0].strip()

    return lastname


def generate_slugs(apps, schema_editor):
    '''Generate uniuqe slugs for works'''
    Work = apps.get_model('books', 'Work')

    # first pass: generate slugs
    works = Work.objects.all()
    for work in works:
        lastname = creator_lastname(work)
        # title with stop words removed
        nonstop_title_words = remove_stopwords(work.title).split()
        # by default, use at most first three words in the title
        slug_text = '%s %s' % (lastname, nonstop_title_words[:3])
        work.slug = slugify(unidecode(slug_text))
        # TODO: use second pass for *all* deduping
        work.save()

    # second pass: make slugs unique
    # - get a list of all slugs that occur more than once
    duplicate_slugs = Work.objects.values('slug') \
        .annotate(slug_count=models.Count('slug')) \
        .filter(slug_count__gt=1).values_list('slug', flat=True)

    # - find all works by slug and uniquify
    for dupe_slug in duplicate_slugs:
        # counter for slugs that require numbers to differentiate
        group_slugs = defaultdict(int)
        # - get all the works with that slug, ordered by title
        for work in Work.objects.filter(slug=dupe_slug).order_by('title') \
                                                       .distinct():
            nonstop_title_words = remove_stopwords(work.title).split()
            # if title has more than three words, use the 4th for uniqueness
            if len(nonstop_title_words) > 3:
                lastname = creator_lastname(work)
                slug_text = '%s %s' % (lastname, nonstop_title_words[:4])
                work.slug = slugify(unidecode(slug_text))

                # if 4-word title slug is already in use, try 5
                if work.slug in group_slugs and len(nonstop_title_words) > 4:
                    slug_text = '%s %s' % (lastname, nonstop_title_words[:5])
                    work.slug = slugify(unidecode(slug_text))

            # count this slug
            group_slugs[work.slug] += 1

            if group_slugs[work.slug] > 1:
                # slug is already in use; add a number to differentiate
                if group_slugs[work.slug] > 1:
                    work.slug = '%s-%d' % (work.slug, group_slugs[work.slug])

            work.save()


class Migration(migrations.Migration):

    dependencies = [
        ('books', '0021_work_slug_creator_order'),
    ]

    operations = [
        migrations.RunPython(
            code=generate_slugs,
            reverse_code=migrations.RunPython.noop,
        ),
        # enforce unique slugs
        migrations.AlterField(
            model_name='work',
            name='slug',
            field=models.SlugField(blank=True, help_text='Short, durable, unique identifier for use in URLs. Save and continue editing to have a new slug autogenerated.Editing will change the public, citable URL for books.', max_length=255, unique=True),
        ),

    ]
