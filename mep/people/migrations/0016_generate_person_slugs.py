# -*- coding: utf-8 -*-
# Generated by Django 1.11.21 on 2019-11-12 21:34
from __future__ import unicode_literals

import itertools
from collections import defaultdict

from django.db import migrations, models
from django.db.models.functions import Lower
from django.utils.text import slugify
from unidecode import unidecode


def group_by_name(queryset):
    # generator to group people by first 3 letters of the last name
    # - use unidecode and lower case to ensure accent and case variants
    #   end up in the same group

    # grouping doesn't work properly if not already sorted, and
    # queryset sort doesn't do exactly what we want (can't ignore unicode)
    for name_start, items in itertools.groupby(
            sorted(queryset, key=lambda x: unidecode(x.sort_name).lower()),
            lambda x: unidecode(x.sort_name).lower()[:3]):
        yield (name_start, items)


def generate_slugs(apps, schema_editor):
    '''Generate uniuqe slugs for people'''
    Person = apps.get_model('people', 'Person')

    # sort by sort name and then earliest date so that numbered slugs
    # will occur in order of currently known dates
    people = Person.objects \
        .annotate(earliest_date=models.Min('account__event__start_date')) \
        .order_by(Lower('sort_name'), 'earliest_date')

    # iterate in chunks based on start of last name
    for name_start, people in group_by_name(people):
        # people is a generator but it will never be very big;
        # convert to a list so we can use more than once and check length
        people = list(people)

        # generate a list of counts by last names to check uniqueness
        group_last_names = defaultdict(int)
        for person in people:
            last_name = unidecode(person.sort_name.split(', ')[0]).lower()
            group_last_names[last_name] += 1

        group_slugs = defaultdict(int)

        # loop through and generate slugs
        for person in people:
            if ', ' in person.sort_name:
                last_name, first_name = person.sort_name.split(', ', 1)
            else:
                last_name = person.sort_name
                first_name = ''

            # start with last name as the basis for the slug
            # - unidecode & lower case to check group last name variants
            slug_text = unidecode(last_name).lower()

            # if last name is not unique, add first name (if known)
            if group_last_names[slug_text] > 1 and first_name:
                slug_text = '%s %s' % (last_name, first_name)

            slug = slugify(unidecode(slug_text))
            # increment the count for the base slug, in case of multiples
            group_slugs[slug] += 1
            # if the slug has already been used, add a number to differentiate
            if group_slugs[slug] > 1:
                slug = '%s-%d' % (slug, group_slugs[slug])

            # save the slug in the database
            person.slug = slug
            person.save()


class Migration(migrations.Migration):

    dependencies = [
        ('people', '0015_add_person_optional_slug'),
    ]

    operations = [
        migrations.RunPython(
            code=generate_slugs,
            reverse_code=migrations.RunPython.noop,
        ),

    ]
