# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-02-08 15:26
from __future__ import unicode_literals

from django.db import migrations
from django.core.exceptions import ObjectDoesNotExist


def remove_old_permissions(apps, schema_editor):
    # NOTE: django migration RenameModel does not update permissions;
    # that's a problem here because
    #       mep.people.address -> mep.people.location
    #   and mep.accounts.accountaddress -> mep.accounts.address
    # resulting in duplicate, ambiguous permisions with codename _address
    #
    # Remove the previously created permissions and let Django create
    # new ones for the renamed model

    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")

    try:
        content_type = ContentType.objects.get(
            model="location",
            app_label="people",
        )
        Permission.objects.filter(
            content_type=content_type,
            codename__in=("add_address", "change_address", "delete_address"),
        ).delete()
    except ObjectDoesNotExist:
        # if content type doesn't exist, permissions haven't been created yet
        pass


class Migration(migrations.Migration):
    dependencies = [
        ("people", "0003_infer_sex_from_title"),
        ("auth", "0008_alter_user_username_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.RenameModel(
            old_name="Address",
            new_name="Location",
        ),
        migrations.RunPython(
            remove_old_permissions, reverse_code=migrations.RunPython.noop
        ),
    ]
