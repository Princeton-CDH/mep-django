# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-02-08 20:12
from __future__ import unicode_literals

from django.db import migrations

def deduplicate_locations(apps, schema_editor):
    Location = apps.get_model("people", "Location")
    Address = apps.get_model("accounts", "Address")
    # current dataset has two entries that are nearly duplicates,
    # with just slight variance in accents that is caught by the
    # database index but is hard to catch via django queries.
    # Handle them explicitly.

    # Hôtel/Hotel Odessa and Hôtel/Hotel Lutetia
    for name in ['Odessa', 'Lutetia']:
        # find all variants
        locations = Location.objects.filter(name__contains=name)
        if locations.count() > 1:
            # both instances have only two versions
            # explicitly find primary and duplicate by accent
            primary = [loc for loc in locations
                       if loc.name.startswith('Hôtel')][0]
            dupe = [loc for loc in locations
                     if loc.name.startswith('Hotel')][0]
            # update all addresses associated with the duplicate
            # to point to the primary
            Address.objects.filter(location=dupe).update(location=primary)
            # remove the duplicate
            dupe.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('people', '0006_update_person_locations'),
        ('accounts', '0014_add_address_rel_to_person')
    ]

    operations = [
        migrations.RunPython(deduplicate_locations,
                             migrations.RunPython.noop),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together=set([('name', 'street_address', 'city', 'country')]),
        ),
    ]
