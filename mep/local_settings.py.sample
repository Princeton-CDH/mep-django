# local settings for sensitive configurations that should not be
# checked into version control

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Turn this on in test/QA site to show test banner
SHOW_TEST_WARNING = True

ALLOWED_HOSTS = []


# List of IPs allowed to see debug content, etc
# INTERNAL_IPS = ('127.0.0.1', )


# SECURITY WARNING: keep the secret key used in production secret!
# http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = ''

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Sample Solr config
SOLR_CONNECTIONS = {
    'default': {
        'URL': 'http://localhost:8983/solr',
        'COLLECTION': 'sco_example',
        'CONFIGSET': 'sandco'
    }
}


# CAS login configuration
CAS_SERVER_URL = ''

PUCAS_LDAP.update({
    'SERVERS': [],
    'SEARCH_BASE': '',
    'SEARCH_FILTER': "(uid=%(user)s)",
})

# username for accessing GeoNames API
GEONAMES_USERNAME = ''

# mapbox access token
MAPBOX_ACCESS_TOKEN = ''

# OCLC API key
OCLC_WSKEY = ''

# Email address for a technical contact.
# Will be used in From header for OCLC API requests
TECHNICAL_CONTACT = 'cdhdevteam@princeton.edu'

# sample logging config for dev
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'basic': {
            'format': '[%(asctime)s] %(levelname)s:%(name)s::%(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'basic'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
        'viapy':  {
            'handlers': ['console'],
            'level': 'DEBUG'
        },
        'mep':  {
            'handlers': ['console'],
            'level': 'DEBUG'
        }

    },
}

# Content security policy controls - see `settings.py` for policy settings.
# https://github.com/mozilla/django-csp
#
# In development, set REPORT_ONLY to True and leave endpoint as localhost/. This
# will log CSP violations to the browser console but not block or report them.
#
# In QA, set REPORT_ONLY to True and specify a "report-only" endpoint. This will
# not block CSP violations, but will report them to an endpoint.
#
# In production, set REPORT_ONLY to False and specify an "enforced" endpoint.
# This will both block and report CSP violations.
#
# CSP_REPORT_ONLY = True
# CSP_REPORT_URI = 'localhost/'
#
# Uncomment the below lines to allow content to be served from webpack's dev
# server through CSP controls when developing locally.
#
# CSP_STYLE_SRC += ("'unsafe-inline'",)
# CSP_SCRIPT_SRC += ("'unsafe-inline'", "http://localhost:3000")
# CSP_DEFAULT_SRC = ("http://localhost:3000", "ws://localhost:3000")