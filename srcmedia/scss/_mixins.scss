@mixin container { // locks to breakpoint widths, for non-text content
    margin-left: auto;
    margin-right: auto;
    width: calc(#{$breakpoint-xs} - 2 * #{$gutter-xs});

    @media (min-width: $breakpoint-s) {
        width: calc(#{$breakpoint-s} - 2 * #{$gutter});
    }

    @media (min-width: $breakpoint-m) {
        width: calc(#{$breakpoint-m} - 2 * #{$gutter});
    }

    @media (min-width: $breakpoint-l) {
        width: $breakpoint-m;
    }
}

@mixin flex-container { // expands in between breakpoints to allow text reflow
    margin-left: $gutter-xs;
    margin-right: $gutter-xs;

    @media (min-width: $breakpoint-s) {
        margin-left: $gutter;
        margin-right: $gutter;
    }

    @media (min-width: $breakpoint-m) {
        margin-left: auto;
        margin-right: auto;
        width: calc(#{$breakpoint-m} - 2 * #{$gutter});
    }

    @media (min-width: $breakpoint-l) {
        width: $breakpoint-m;
    }
}

@mixin padding-container { // full-width; uses padding instead of margin
    padding-left: $gutter-xs;
    padding-right: $gutter-xs;

    @media (min-width: $breakpoint-s) {
        padding-left: $gutter;
        padding-right: $gutter;
    }

    @media (min-width: $breakpoint-m) {
        padding-left: calc((100vw - #{$breakpoint-m} + 2 * #{$gutter}) / 2);
        padding-right: calc((100vw - #{$breakpoint-m} + 2 * #{$gutter}) / 2);
    }

    @media (min-width: $breakpoint-l) {
        padding-left: calc((100vw - #{$breakpoint-m}) / 2);
        padding-right: calc((100vw - #{$breakpoint-m}) / 2);
    }
}

@mixin responsive-banner($src) {
    // xs -> s
    background-image: url("#{$src}_S@1x.jpg");

    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
        background-image: url("#{$src}_S@2x.jpg");
    }

    // s -> l
    @media (min-width: $breakpoint-s) {
        background-image: url("#{$src}_M@1x.jpg");

        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
            background-image: url("#{$src}_M@2x.jpg");

        }
    }

    // l -> xl
    @media (min-width: $breakpoint-l) {
        background-image: url("#{$src}@1x.jpg");

        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
            background-image: url("#{$src}@2x.jpg");

        }
    }
}

// adds a transparent blue loading bar at top when element is aria-hidden
@mixin loader-bottom {
    overflow: hidden;

    &::before {
        content: '';
        position: absolute;
        bottom: 0;
        height: .2rem;
        opacity: 0;
        transition: opacity 0.2s;
        overflow: hidden;
        background-color: $transparent-blue;
        width: 10%;
        left: -10%;
        animation: loading 2s linear infinite;
        border-radius: 1rem;
    }

    &[aria-busy]::before {
        opacity: 1;
    }

    @keyframes loading {
        from {
            left: -50%;
            width: 10%;
        }
        50% {
            width: 30%;
        }
        70% {
            width: 60%;
        }
        80% {
            left: 50%;
            width: 100%;
        }
        95% {
            left: 125%;
        }
        to {
            left: 150%;
        }
    }
}

// adds a small black indicator triangle that can be rotated expanded/selected
@mixin expandable {
    position: relative;

    &::after {
        content: '';
        width: 0;
        height: 0;
        position: absolute;
        right: 0.5rem;
        top: calc(50% - 4px);
        border-style: solid;
        border-width: 8px 7px 0;
        border-color: black $transparent $transparent $transparent;
        // transition: all 0.3s ease-in-out;
    }

    &[aria-disabled]::after {
        border-color: $mid-grey $transparent $transparent $transparent;
    }
}

// green text with underline that darkens when hovered/focused
@mixin green-link {
    text-decoration: underline;
    text-decoration-color: $green;
    text-decoration-thickness: .1rem;
    text-underline-offset: .2rem;
    transition: all 0.2s;

    &:hover, &:focus {
        text-decoration-color: $dark-green;
        cursor: pointer;
    }
}

// emulate gap() property on flexbox elements for browsers that don't support it
// adapted from https://coryrylan.com/blog/css-gap-space-with-flexbox
@mixin flex-gap($gap) {
    display: inline-flex;
    flex-wrap: wrap;
    margin: calc(-1 * #{$gap}) 0 0 calc(-1 * #{$gap});
    width: calc(100% + #{$gap});
    > * { margin: #{$gap} 0 0 #{$gap}; }
}
